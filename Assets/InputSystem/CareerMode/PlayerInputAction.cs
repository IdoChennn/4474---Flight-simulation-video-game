//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/CareerMode/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Plane"",
            ""id"": ""ca732f7a-48c0-440f-b633-416e9d648ae9"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b54c3bb5-93d5-4377-adb0-757f5bf871d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""60fbb812-bc40-4f15-9870-0166fbce7f42"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Value"",
                    ""id"": ""1094ad7c-d2f4-43a5-b65c-6b5a38635c96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""099c4e01-48df-4c5e-9656-b2ce02c1469c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d2885eee-25c9-4b8d-aa04-3ec18ec92177"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e53a5e22-6e40-4434-8104-173c9d2b12b9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""42499ca3-049a-4065-a743-58b4eb27c1e4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cd8b0da9-e08b-41c4-a591-e03a3bf493d0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ae70e615-8bff-4be0-a329-9315e40573f0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""784e184a-7e12-48c9-ae83-589ac3658ee8"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EightKeys"",
            ""id"": ""ff4f09e6-45a7-4c72-9d47-1349f8eb5d82"",
            ""actions"": [
                {
                    ""name"": ""Brust"",
                    ""type"": ""Value"",
                    ""id"": ""34bb5f6e-7762-4c18-baaf-cbffafe42e7f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Value"",
                    ""id"": ""2be33a91-c86f-4587-b249-c88ca5a09c68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftShift"",
                    ""type"": ""Value"",
                    ""id"": ""e27f7ae5-133d-4595-96b5-a8cf544c9c86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RIghtShift"",
                    ""type"": ""Value"",
                    ""id"": ""690a6403-ee4e-43d7-9e99-9dcdd7df1063"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Value"",
                    ""id"": ""43cbfca9-689b-4a82-9995-79c68b471c6e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Value"",
                    ""id"": ""a83362b2-f6e4-4a55-8d9e-0acaaeafd2d8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftRoll"",
                    ""type"": ""Value"",
                    ""id"": ""b32624e1-d4b3-4bee-a475-ffb94b76bd4b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightRoll"",
                    ""type"": ""Value"",
                    ""id"": ""3bc82d50-e367-4f31-ada3-b492c90709c1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4504ee17-cca8-4b32-b73b-0503a7dc660f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Brust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcaf9f6d-de53-4604-83ca-ebc1d1ea25b1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6814d330-f13e-4a44-9201-64b06427b989"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""LeftShift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fd67c0a-5fb1-4c1b-94ce-0178c37548cc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""RIghtShift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2854007-1d63-4d08-9026-10fef89e9fce"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b7fdc65-8373-4c39-9138-f8f9f5f8f6ec"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4406d620-e478-4170-be3b-06e3dd597f60"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66781fa7-efa5-4f03-b097-6f1d0c6b05ab"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keyboard"",
            ""bindingGroup"": ""keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""gamePad"",
            ""bindingGroup"": ""gamePad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Plane
        m_Plane = asset.FindActionMap("Plane", throwIfNotFound: true);
        m_Plane_Jump = m_Plane.FindAction("Jump", throwIfNotFound: true);
        m_Plane_Movement = m_Plane.FindAction("Movement", throwIfNotFound: true);
        m_Plane_Fire = m_Plane.FindAction("Fire", throwIfNotFound: true);
        // EightKeys
        m_EightKeys = asset.FindActionMap("EightKeys", throwIfNotFound: true);
        m_EightKeys_Brust = m_EightKeys.FindAction("Brust", throwIfNotFound: true);
        m_EightKeys_Break = m_EightKeys.FindAction("Break", throwIfNotFound: true);
        m_EightKeys_LeftShift = m_EightKeys.FindAction("LeftShift", throwIfNotFound: true);
        m_EightKeys_RIghtShift = m_EightKeys.FindAction("RIghtShift", throwIfNotFound: true);
        m_EightKeys_Up = m_EightKeys.FindAction("Up", throwIfNotFound: true);
        m_EightKeys_Down = m_EightKeys.FindAction("Down", throwIfNotFound: true);
        m_EightKeys_LeftRoll = m_EightKeys.FindAction("LeftRoll", throwIfNotFound: true);
        m_EightKeys_RightRoll = m_EightKeys.FindAction("RightRoll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Plane
    private readonly InputActionMap m_Plane;
    private IPlaneActions m_PlaneActionsCallbackInterface;
    private readonly InputAction m_Plane_Jump;
    private readonly InputAction m_Plane_Movement;
    private readonly InputAction m_Plane_Fire;
    public struct PlaneActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlaneActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Plane_Jump;
        public InputAction @Movement => m_Wrapper.m_Plane_Movement;
        public InputAction @Fire => m_Wrapper.m_Plane_Fire;
        public InputActionMap Get() { return m_Wrapper.m_Plane; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaneActions set) { return set.Get(); }
        public void SetCallbacks(IPlaneActions instance)
        {
            if (m_Wrapper.m_PlaneActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlaneActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlaneActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlaneActionsCallbackInterface.OnJump;
                @Movement.started -= m_Wrapper.m_PlaneActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlaneActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlaneActionsCallbackInterface.OnMovement;
                @Fire.started -= m_Wrapper.m_PlaneActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PlaneActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PlaneActionsCallbackInterface.OnFire;
            }
            m_Wrapper.m_PlaneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
            }
        }
    }
    public PlaneActions @Plane => new PlaneActions(this);

    // EightKeys
    private readonly InputActionMap m_EightKeys;
    private IEightKeysActions m_EightKeysActionsCallbackInterface;
    private readonly InputAction m_EightKeys_Brust;
    private readonly InputAction m_EightKeys_Break;
    private readonly InputAction m_EightKeys_LeftShift;
    private readonly InputAction m_EightKeys_RIghtShift;
    private readonly InputAction m_EightKeys_Up;
    private readonly InputAction m_EightKeys_Down;
    private readonly InputAction m_EightKeys_LeftRoll;
    private readonly InputAction m_EightKeys_RightRoll;
    public struct EightKeysActions
    {
        private @PlayerInputAction m_Wrapper;
        public EightKeysActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Brust => m_Wrapper.m_EightKeys_Brust;
        public InputAction @Break => m_Wrapper.m_EightKeys_Break;
        public InputAction @LeftShift => m_Wrapper.m_EightKeys_LeftShift;
        public InputAction @RIghtShift => m_Wrapper.m_EightKeys_RIghtShift;
        public InputAction @Up => m_Wrapper.m_EightKeys_Up;
        public InputAction @Down => m_Wrapper.m_EightKeys_Down;
        public InputAction @LeftRoll => m_Wrapper.m_EightKeys_LeftRoll;
        public InputAction @RightRoll => m_Wrapper.m_EightKeys_RightRoll;
        public InputActionMap Get() { return m_Wrapper.m_EightKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EightKeysActions set) { return set.Get(); }
        public void SetCallbacks(IEightKeysActions instance)
        {
            if (m_Wrapper.m_EightKeysActionsCallbackInterface != null)
            {
                @Brust.started -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnBrust;
                @Brust.performed -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnBrust;
                @Brust.canceled -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnBrust;
                @Break.started -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnBreak;
                @Break.performed -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnBreak;
                @Break.canceled -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnBreak;
                @LeftShift.started -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnLeftShift;
                @LeftShift.performed -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnLeftShift;
                @LeftShift.canceled -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnLeftShift;
                @RIghtShift.started -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnRIghtShift;
                @RIghtShift.performed -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnRIghtShift;
                @RIghtShift.canceled -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnRIghtShift;
                @Up.started -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnDown;
                @LeftRoll.started -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnLeftRoll;
                @LeftRoll.performed -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnLeftRoll;
                @LeftRoll.canceled -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnLeftRoll;
                @RightRoll.started -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnRightRoll;
                @RightRoll.performed -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnRightRoll;
                @RightRoll.canceled -= m_Wrapper.m_EightKeysActionsCallbackInterface.OnRightRoll;
            }
            m_Wrapper.m_EightKeysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Brust.started += instance.OnBrust;
                @Brust.performed += instance.OnBrust;
                @Brust.canceled += instance.OnBrust;
                @Break.started += instance.OnBreak;
                @Break.performed += instance.OnBreak;
                @Break.canceled += instance.OnBreak;
                @LeftShift.started += instance.OnLeftShift;
                @LeftShift.performed += instance.OnLeftShift;
                @LeftShift.canceled += instance.OnLeftShift;
                @RIghtShift.started += instance.OnRIghtShift;
                @RIghtShift.performed += instance.OnRIghtShift;
                @RIghtShift.canceled += instance.OnRIghtShift;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @LeftRoll.started += instance.OnLeftRoll;
                @LeftRoll.performed += instance.OnLeftRoll;
                @LeftRoll.canceled += instance.OnLeftRoll;
                @RightRoll.started += instance.OnRightRoll;
                @RightRoll.performed += instance.OnRightRoll;
                @RightRoll.canceled += instance.OnRightRoll;
            }
        }
    }
    public EightKeysActions @EightKeys => new EightKeysActions(this);
    private int m_keyboardSchemeIndex = -1;
    public InputControlScheme keyboardScheme
    {
        get
        {
            if (m_keyboardSchemeIndex == -1) m_keyboardSchemeIndex = asset.FindControlSchemeIndex("keyboard");
            return asset.controlSchemes[m_keyboardSchemeIndex];
        }
    }
    private int m_gamePadSchemeIndex = -1;
    public InputControlScheme gamePadScheme
    {
        get
        {
            if (m_gamePadSchemeIndex == -1) m_gamePadSchemeIndex = asset.FindControlSchemeIndex("gamePad");
            return asset.controlSchemes[m_gamePadSchemeIndex];
        }
    }
    public interface IPlaneActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
    public interface IEightKeysActions
    {
        void OnBrust(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
        void OnLeftShift(InputAction.CallbackContext context);
        void OnRIghtShift(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeftRoll(InputAction.CallbackContext context);
        void OnRightRoll(InputAction.CallbackContext context);
    }
}
